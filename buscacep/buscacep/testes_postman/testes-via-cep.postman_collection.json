{
	"info": {
		"_postman_id": "d715c78c-5f2d-41bd-a0a6-60a393d0c2da",
		"name": "testes-via-cep",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19885069"
	},
	"item": [
		{
			"name": "CEP-400-error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Response body contains an H1 tag with the text 'http 400'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include('<h1>Http 400</h1>');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "viacep.com.br/ws/123/json/",
					"host": [
						"viacep",
						"com",
						"br"
					],
					"path": [
						"ws",
						"123",
						"json",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "CEP-200-ok",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code é 200 (OK)\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Resposta é menos que 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"validar o esquema retornado se condiz com o esperado\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('cep');\r",
							"    pm.expect(responseData).to.have.property('logradouro');\r",
							"    pm.expect(responseData).to.have.property('bairro');\r",
							"    pm.expect(responseData).to.have.property('localidade');\r",
							"    pm.expect(responseData).to.have.property('uf');\r",
							"    pm.expect(responseData).to.have.property('ibge');\r",
							"});\r",
							"\r",
							"pm.test(\"Uf deveria ser 'SP'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.uf).to.equal('SP');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "viacep.com.br/ws/01001000/json/",
					"host": [
						"viacep",
						"com",
						"br"
					],
					"path": [
						"ws",
						"01001000",
						"json",
						""
					]
				}
			},
			"response": []
		}
	]
}